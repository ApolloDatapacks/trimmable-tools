plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fapi_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ":common", configuration: "transformProductionFabric")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

/*publishMods {
    file = remapJar.archiveFile
    changelog = "${update_changelog}"
    type = STABLE
    modLoaders.add("fabric")
    displayName = "v%s ~ Fabric 1.20".formatted(project.version)

    dryRun = true

    modrinth {
        accessToken = providers.environmentVariable("TOKEN_MR")
        projectId = "MJu3fF3K"

        minecraftVersions.add("1.20.1")

        requires {
            slug = "fabric-api"
        }
    }

    curseforge {
        accessToken = providers.environmentVariable("TOKEN_CF")
        projectId = "834329"

        minecraftVersions.add("1.20.1")

        requires("fabric-api")
    }
}*/